#!/usr/bin/env swift
import Foundation

// nn: thin wrapper to run the LlamaBridgeTest CLI with passthrough arguments
// - Resolves the CLI binary from common locations or NOESIS_LLAMA_BRIDGE_BIN
// - Usage examples:
//     ./nn model list
//     ./nn model defaults
//     ./nn rag demo

func candidateBinaries() -> [String] {
    let fm = FileManager.default
    let cwd = fm.currentDirectoryPath
    var paths: [String] = []
    // project-local products
    paths.append("\(cwd)/build/Build/Products/Debug/LlamaBridgeTest")
    paths.append("\(cwd)/build/Debug/LlamaBridgeTest")
    // DerivedData (prefer newest)
    if let home = ProcessInfo.processInfo.environment["HOME"] {
        let dd = "\(home)/Library/Developer/Xcode/DerivedData"
        if let entries = try? fm.contentsOfDirectory(atPath: dd) {
            let cands = entries.filter { $0.hasPrefix("NoesisNoema-") }.sorted { a, b in
                let pa = "\(dd)/\(a)"; let pb = "\(dd)/\(b)"
                let ma = (try? fm.attributesOfItem(atPath: pa)[.modificationDate] as? Date) ?? .distantPast
                let mb = (try? fm.attributesOfItem(atPath: pb)[.modificationDate] as? Date) ?? .distantPast
                return ma > mb
            }
            for c in cands { paths.append("\(dd)/\(c)/Build/Products/Debug/LlamaBridgeTest") }
        }
    }
    // env override
    if let env = ProcessInfo.processInfo.environment["NOESIS_LLAMA_BRIDGE_BIN"], !env.isEmpty {
        paths.insert(env, at: 0)
    }
    return paths
}

func findBinary() -> String? {
    let fm = FileManager.default
    for p in candidateBinaries() { if fm.isExecutableFile(atPath: p) { return p } }
    return nil
}

func run(_ exe: String, _ args: [String]) -> Int32 {
    let p = Process()
    p.executableURL = URL(fileURLWithPath: exe)
    p.arguments = args
    p.standardInput = FileHandle.standardInput
    p.standardOutput = FileHandle.standardOutput
    p.standardError = FileHandle.standardError
    do { try p.run(); p.waitUntilExit(); return p.terminationStatus } catch { fputs("nn: failed to launch CLI: \(error)\n", stderr); return 127 }
}

var args = CommandLine.arguments
args.removeFirst() // drop script name

if let bin = findBinary() {
    let code = run(bin, args)
    exit(code)
} else {
    fputs("nn: LlamaBridgeTest binary not found.\n", stderr)
    fputs("Hint: build first, e.g. via Xcode or: xcrun xcodebuild -scheme LlamaBridgeTest -configuration Debug build\n", stderr)
    exit(127)
}
